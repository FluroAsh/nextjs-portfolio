# Creating multi-stage build for production
FROM node:18-alpine AS build
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1

ENV NODE_ENV=${NODE_ENV}
ENV DATABASE_URL=${DATABASE_URL}

ENV JWT_SECRET=${JWT_SECRET}
ENV API_TOKEN_SALT=${API_TOKEN_SALT}
ENV APP_KEYS=${APP_KEYS}

ENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
ENV AWS_ACCESS_SECRET=${AWS_ACCESS_SECRET}
ENV AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
ENV AWS_REGION=${AWS_REGION}

# Debugging Variables
RUN echo $NODE_ENV
RUN echo $DATABASE_URL
RUN echo $JWT_SECRET
RUN echo $API_TOKEN_SALT
RUN echo $APP_KEYS
RUN echo $AWS_ACCESS_KEY_ID
RUN echo $AWS_ACCESS_SECRET
RUN echo $AWS_BUCKET_NAME
RUN echo $AWS_REGION

WORKDIR /opt/
COPY package*.json ./

RUN npm install -g node-gyp
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --only=production

ENV PATH /opt/node_modules/.bin:$PATH
WORKDIR /opt/app
COPY . .
RUN npm run build

# Creating final production image
FROM node:18-alpine
RUN apk add --no-cache vips-dev
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
WORKDIR /opt/
COPY --from=build /opt/node_modules ./node_modules
WORKDIR /opt/app
COPY --from=build /opt/app ./
ENV PATH /opt/node_modules/.bin:$PATH

RUN chown -R node:node /opt/app
USER node
EXPOSE 1337
CMD ["npm", "run", "start"]